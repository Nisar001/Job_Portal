import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
var _excluded = ["isSubItem", "title", "titleElement", "icon", "iconProps", "items", "children"],
  _excluded2 = ["isGroupTitle", "className"],
  _excluded3 = ["className"];
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0 and the Server Side Public License, v 1; you may not use this file except
 * in compliance with, at your election, the Elastic License 2.0 or the Server
 * Side Public License, v 1.
 */

import React, { useContext } from 'react';
import classNames from 'classnames';
import { useEuiTheme } from '../../../services';
import { EuiIcon } from '../../icon';
import { EuiTitle } from '../../title';
import { EuiCollapsibleNavContext } from '../context';
import { EuiCollapsedNavItem } from './collapsed';
import { EuiCollapsibleNavAccordion } from './collapsible_nav_accordion';
import { EuiCollapsibleNavLink } from './collapsible_nav_link';
import { euiCollapsibleNavItemTitleStyles, euiCollapsibleNavSubItemGroupTitleStyles } from './collapsible_nav_item.styles';
import { jsx as ___EmotionJSX } from "@emotion/react";
/**
 * Internal DRY subcomponent shared between top level items and sub items
 * that handles title display/rendering, and can be used to recursively
 * determine whether to render an accordion or a link
 */
var EuiCollapsibleNavItemDisplay = function EuiCollapsibleNavItemDisplay(_ref) {
  var _props$linkProps;
  var isSubItem = _ref.isSubItem,
    title = _ref.title,
    titleElement = _ref.titleElement,
    icon = _ref.icon,
    iconProps = _ref.iconProps,
    items = _ref.items,
    children = _ref.children,
    props = _objectWithoutProperties(_ref, _excluded);
  var headerContent = ___EmotionJSX(EuiCollapsibleNavItemTitle, {
    title: title,
    titleElement: titleElement,
    icon: icon,
    iconProps: iconProps
  });
  var isAccordion = items && items.length > 0;
  if (isAccordion) {
    return ___EmotionJSX(EuiCollapsibleNavAccordion, _extends({
      buttonContent: headerContent,
      items: items
    }, props, {
      isSubItem: isSubItem
    }));
  }
  return ___EmotionJSX(EuiCollapsibleNavLink, _extends({}, props, {
    // EuiLink ExclusiveUnion type shenanigans
    isSubItem: isSubItem,
    isNotAccordion: true,
    isInteractive: !!(props.href || props.onClick || (_props$linkProps = props.linkProps) !== null && _props$linkProps !== void 0 && _props$linkProps.onClick)
  }), headerContent);
};

/**
 * Internal subcomponent for title display
 */
var EuiCollapsibleNavItemTitle = function EuiCollapsibleNavItemTitle(_ref2) {
  var title = _ref2.title,
    _ref2$titleElement = _ref2.titleElement,
    titleElement = _ref2$titleElement === void 0 ? 'span' : _ref2$titleElement,
    icon = _ref2.icon,
    iconProps = _ref2.iconProps;
  var styles = euiCollapsibleNavItemTitleStyles;
  var TitleElement = titleElement;
  return ___EmotionJSX(React.Fragment, null, icon && ___EmotionJSX(EuiIcon, _extends({
    type: icon
  }, iconProps)), ___EmotionJSX(TitleElement, {
    className: "euiCollapsibleNavItem__title eui-textTruncate",
    css: styles.euiCollapsibleNavItem__title
  }, title));
};

/**
 * Sub-items can either be a group title, to visually separate sections
 * of nav links, or they can simply be more links or accordions
 */
export var EuiCollapsibleNavSubItem = function EuiCollapsibleNavSubItem(_ref3) {
  var isGroupTitle = _ref3.isGroupTitle,
    className = _ref3.className,
    props = _objectWithoutProperties(_ref3, _excluded2);
  var euiTheme = useEuiTheme();
  var styles = euiCollapsibleNavSubItemGroupTitleStyles(euiTheme);
  var classes = classNames('euiCollapsibleNavSubItem', className);
  if (isGroupTitle) {
    var TitleElement = props.titleElement || 'div';
    return ___EmotionJSX(EuiTitle, {
      size: "xxxs",
      css: styles.euiCollapsibleNavItem__groupTitle,
      className: "euiCollapsibleNavItem__groupTitle eui-textTruncate"
    }, ___EmotionJSX(TitleElement, null, props.title));
  }
  return ___EmotionJSX(EuiCollapsibleNavItemDisplay, _extends({
    className: classes
  }, props, {
    isSubItem: true
  }));
};

/**
 * The actual exported component
 */

export var EuiCollapsibleNavItem = function EuiCollapsibleNavItem(_ref4) {
  var className = _ref4.className,
    props = _objectWithoutProperties(_ref4, _excluded3);
  var classes = classNames('euiCollapsibleNavItem', className);
  var _useContext = useContext(EuiCollapsibleNavContext),
    isCollapsed = _useContext.isCollapsed,
    isPush = _useContext.isPush;
  return isCollapsed && isPush ? ___EmotionJSX(EuiCollapsedNavItem, _extends({
    className: classes
  }, props)) : ___EmotionJSX(EuiCollapsibleNavItemDisplay, _extends({
    className: classes
  }, props, {
    isSubItem: false
  }));
};