import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
var _excluded = ["id", "className", "items", "href", "isSubItem", "isSelected", "linkProps", "accordionProps", "buttonContent", "children"];
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0 and the Server Side Public License, v 1; you may not use this file except
 * in compliance with, at your election, the Elastic License 2.0 or the Server
 * Side Public License, v 1.
 */

import React, { useCallback, useMemo } from 'react';
import classNames from 'classnames';
import { useEuiTheme, useGeneratedHtmlId } from '../../../services';
import { EuiAccordion } from '../../accordion';
import { EuiCollapsibleNavSubItem } from './collapsible_nav_item';
import { EuiCollapsibleNavLink } from './collapsible_nav_link';
import { euiCollapsibleNavAccordionStyles } from './collapsible_nav_accordion.styles';
import { jsx as ___EmotionJSX } from "@emotion/react";
/**
 * Internal nav accordion component.
 *
 * Renders children as either a nav link or any number/nesting of more nav accordions.
 * Triggering the open/closed state is handled only by the accordion `arrow` for
 * UX consistency, as accordion/nav titles can be their own links to pages.
 */
export var EuiCollapsibleNavAccordion = function EuiCollapsibleNavAccordion(_ref) {
  var _accordionProps$arrow;
  var id = _ref.id,
    className = _ref.className,
    items = _ref.items,
    href = _ref.href,
    isSubItem = _ref.isSubItem,
    isSelected = _ref.isSelected,
    linkProps = _ref.linkProps,
    accordionProps = _ref.accordionProps,
    buttonContent = _ref.buttonContent,
    _children = _ref.children,
    rest = _objectWithoutProperties(_ref, _excluded);
  var classes = classNames('euiCollapsibleNavAccordion', className);
  var groupID = useGeneratedHtmlId({
    conditionalId: id
  });
  var euiTheme = useEuiTheme();
  var styles = euiCollapsibleNavAccordionStyles(euiTheme);
  var cssStyles = [styles.euiCollapsibleNavAccordion, isSubItem ? styles.isSubItem : styles.isTopItem, isSelected && styles.isSelected, accordionProps === null || accordionProps === void 0 ? void 0 : accordionProps.css];

  /**
   * Title / accordion trigger
   */
  var isTitleInteractive = !!(href || linkProps !== null && linkProps !== void 0 && linkProps.onClick);

  // Stop propagation on the title so that the accordion toggle doesn't occur on click
  // (should only occur on accordion arrow click for UX consistency)
  var stopPropagationClick = useCallback(function (e) {
    var _linkProps$onClick;
    e.stopPropagation();
    linkProps === null || linkProps === void 0 ? void 0 : (_linkProps$onClick = linkProps.onClick) === null || _linkProps$onClick === void 0 ? void 0 : _linkProps$onClick.call(linkProps, e);
  }, [linkProps === null || linkProps === void 0 ? void 0 : linkProps.onClick] // eslint-disable-line react-hooks/exhaustive-deps
  );

  /**
   * Child items
   */
  // If any of the sub items have an icon, default to an
  // icon of `empty` so that all text lines up vertically
  var itemsHaveIcons = useMemo(function () {
    return items.some(function (item) {
      return !!item.icon;
    });
  }, [items]);
  var icon = itemsHaveIcons ? 'empty' : undefined;
  var childrenCssStyles = [styles.children.euiCollapsibleNavAccordion__children, isSubItem ? styles.children.isSubItem : styles.children.isTopItem];
  var children = ___EmotionJSX("div", {
    css: childrenCssStyles,
    className: "euiCollapsibleNavAccordion__children"
  }, items.map(function (item, index) {
    return (
      // This is an intentional circular dependency between the accordion & parent item display.
      // EuiSideNavItem is purposely recursive to support any amount of nested sub items,
      // and split up into separate files/components for better dev readability
      ___EmotionJSX(EuiCollapsibleNavSubItem, _extends({
        key: index,
        icon: icon
      }, item))
    );
  }));
  return ___EmotionJSX(EuiAccordion, _extends({
    id: groupID,
    className: classes,
    initialIsOpen: isSelected,
    buttonElement: "div",
    buttonContent: ___EmotionJSX(EuiCollapsibleNavLink, _extends({
      href: href
    }, linkProps, {
      isSelected: isSelected,
      isSubItem: isSubItem,
      onClick: stopPropagationClick,
      isInteractive: isTitleInteractive
    }), buttonContent),
    arrowDisplay: "right"
  }, rest, accordionProps, {
    css: cssStyles,
    arrowProps: _objectSpread(_objectSpread({
      iconSize: 's'
    }, accordionProps === null || accordionProps === void 0 ? void 0 : accordionProps.arrowProps), {}, {
      css: [styles.euiCollapsibleNavAccordion__arrow, accordionProps === null || accordionProps === void 0 ? void 0 : (_accordionProps$arrow = accordionProps.arrowProps) === null || _accordionProps$arrow === void 0 ? void 0 : _accordionProps$arrow.css]
    })
  }), children);
};