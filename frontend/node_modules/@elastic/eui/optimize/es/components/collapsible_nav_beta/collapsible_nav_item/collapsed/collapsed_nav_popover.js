import _extends from "@babel/runtime/helpers/extends";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
var _excluded = ["items", "href", "linkProps", "title", "titleElement", "icon", "iconProps", "isSelected", "accordionProps"];
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0 and the Server Side Public License, v 1; you may not use this file except
 * in compliance with, at your election, the Elastic License 2.0 or the Server
 * Side Public License, v 1.
 */

import React, { useState, useCallback } from 'react';
import { useEuiTheme } from '../../../../services';
import { EuiLink } from '../../../link';
import { EuiPopover, EuiPopoverTitle } from '../../../popover';
import { EuiCollapsibleNavSubItem } from '../collapsible_nav_item';
import { EuiCollapsedNavButton } from './collapsed_nav_button';
import { euiCollapsedNavPopoverStyles, euiCollapsedNavPopoverTitleStyles } from './collapsed_nav_popover.styles';
import { jsx as ___EmotionJSX } from "@emotion/react";
export var EuiCollapsedNavPopover = function EuiCollapsedNavPopover(_ref) {
  var items = _ref.items,
    href = _ref.href,
    linkProps = _ref.linkProps,
    title = _ref.title,
    titleElement = _ref.titleElement,
    icon = _ref.icon,
    iconProps = _ref.iconProps,
    isSelected = _ref.isSelected,
    accordionProps = _ref.accordionProps,
    rest = _objectWithoutProperties(_ref, _excluded);
  var euiTheme = useEuiTheme();
  var styles = euiCollapsedNavPopoverStyles(euiTheme);
  var _useState = useState(false),
    _useState2 = _slicedToArray(_useState, 2),
    isPopoverOpen = _useState2[0],
    setIsPopoverOpen = _useState2[1];
  var togglePopover = useCallback(function () {
    return setIsPopoverOpen(function (isOpen) {
      return !isOpen;
    });
  }, []);
  var closePopover = useCallback(function () {
    return setIsPopoverOpen(false);
  }, []);
  return ___EmotionJSX(EuiPopover, _extends({
    closePopover: closePopover,
    isOpen: isPopoverOpen,
    display: "block",
    anchorPosition: "rightUp",
    panelPaddingSize: "none",
    panelProps: {
      css: styles.euiCollapsedNavPopover__panel
    },
    button: ___EmotionJSX(EuiCollapsedNavButton, {
      title: title,
      icon: icon || 'boxesHorizontal',
      iconProps: iconProps,
      isSelected: isSelected,
      onClick: togglePopover,
      hideToolTip: isPopoverOpen
      // Note: do not pass `linkProps` to buttons that toggle popovers
    })
  }, rest), ___EmotionJSX(EuiCollapsedNavPopoverTitle, {
    title: title,
    titleElement: titleElement,
    href: href,
    linkProps: linkProps
  }), ___EmotionJSX("div", {
    css: styles.euiCollapsedNavPopover__items
  }, items.map(function (item, index) {
    return ___EmotionJSX(EuiCollapsibleNavSubItem, _extends({
      key: index
    }, item));
  })));
};
var EuiCollapsedNavPopoverTitle = function EuiCollapsedNavPopoverTitle(_ref2) {
  var title = _ref2.title,
    _ref2$titleElement = _ref2.titleElement,
    TitleElement = _ref2$titleElement === void 0 ? 'span' : _ref2$titleElement,
    href = _ref2.href,
    linkProps = _ref2.linkProps;
  var euiTheme = useEuiTheme();
  var styles = euiCollapsedNavPopoverTitleStyles(euiTheme);
  var cssStyles = [styles.euiCollapsedNavPopover__title, href ? styles.link : styles.span, href && (linkProps === null || linkProps === void 0 ? void 0 : linkProps.css)];
  return ___EmotionJSX(EuiPopoverTitle, null, href ? ___EmotionJSX(EuiLink, _extends({
    href: href,
    color: "text"
  }, linkProps, {
    // ExclusiveUnion shenanigans :|
    css: cssStyles
  }), ___EmotionJSX(TitleElement, {
    className: "eui-textTruncate"
  }, title)) : ___EmotionJSX(TitleElement, {
    css: cssStyles,
    className: "eui-textTruncate"
  }, title));
};