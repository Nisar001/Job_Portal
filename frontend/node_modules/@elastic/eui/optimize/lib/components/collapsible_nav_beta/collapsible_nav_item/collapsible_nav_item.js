"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.EuiCollapsibleNavSubItem = exports.EuiCollapsibleNavItem = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _react = _interopRequireWildcard(require("react"));
var _classnames = _interopRequireDefault(require("classnames"));
var _services = require("../../../services");
var _icon = require("../../icon");
var _title = require("../../title");
var _context = require("../context");
var _collapsed = require("./collapsed");
var _collapsible_nav_accordion = require("./collapsible_nav_accordion");
var _collapsible_nav_link = require("./collapsible_nav_link");
var _collapsible_nav_item = require("./collapsible_nav_item.styles");
var _react2 = require("@emotion/react");
var _excluded = ["isSubItem", "title", "titleElement", "icon", "iconProps", "items", "children"],
  _excluded2 = ["isGroupTitle", "className"],
  _excluded3 = ["className"];
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0 and the Server Side Public License, v 1; you may not use this file except
 * in compliance with, at your election, the Elastic License 2.0 or the Server
 * Side Public License, v 1.
 */
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/**
 * Internal DRY subcomponent shared between top level items and sub items
 * that handles title display/rendering, and can be used to recursively
 * determine whether to render an accordion or a link
 */
var EuiCollapsibleNavItemDisplay = function EuiCollapsibleNavItemDisplay(_ref) {
  var _props$linkProps;
  var isSubItem = _ref.isSubItem,
    title = _ref.title,
    titleElement = _ref.titleElement,
    icon = _ref.icon,
    iconProps = _ref.iconProps,
    items = _ref.items,
    children = _ref.children,
    props = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  var headerContent = (0, _react2.jsx)(EuiCollapsibleNavItemTitle, {
    title: title,
    titleElement: titleElement,
    icon: icon,
    iconProps: iconProps
  });
  var isAccordion = items && items.length > 0;
  if (isAccordion) {
    return (0, _react2.jsx)(_collapsible_nav_accordion.EuiCollapsibleNavAccordion, (0, _extends2.default)({
      buttonContent: headerContent,
      items: items
    }, props, {
      isSubItem: isSubItem
    }));
  }
  return (0, _react2.jsx)(_collapsible_nav_link.EuiCollapsibleNavLink, (0, _extends2.default)({}, props, {
    // EuiLink ExclusiveUnion type shenanigans
    isSubItem: isSubItem,
    isNotAccordion: true,
    isInteractive: !!(props.href || props.onClick || (_props$linkProps = props.linkProps) !== null && _props$linkProps !== void 0 && _props$linkProps.onClick)
  }), headerContent);
};

/**
 * Internal subcomponent for title display
 */
var EuiCollapsibleNavItemTitle = function EuiCollapsibleNavItemTitle(_ref2) {
  var title = _ref2.title,
    _ref2$titleElement = _ref2.titleElement,
    titleElement = _ref2$titleElement === void 0 ? 'span' : _ref2$titleElement,
    icon = _ref2.icon,
    iconProps = _ref2.iconProps;
  var styles = _collapsible_nav_item.euiCollapsibleNavItemTitleStyles;
  var TitleElement = titleElement;
  return (0, _react2.jsx)(_react.default.Fragment, null, icon && (0, _react2.jsx)(_icon.EuiIcon, (0, _extends2.default)({
    type: icon
  }, iconProps)), (0, _react2.jsx)(TitleElement, {
    className: "euiCollapsibleNavItem__title eui-textTruncate",
    css: styles.euiCollapsibleNavItem__title
  }, title));
};

/**
 * Sub-items can either be a group title, to visually separate sections
 * of nav links, or they can simply be more links or accordions
 */
var EuiCollapsibleNavSubItem = function EuiCollapsibleNavSubItem(_ref3) {
  var isGroupTitle = _ref3.isGroupTitle,
    className = _ref3.className,
    props = (0, _objectWithoutProperties2.default)(_ref3, _excluded2);
  var euiTheme = (0, _services.useEuiTheme)();
  var styles = (0, _collapsible_nav_item.euiCollapsibleNavSubItemGroupTitleStyles)(euiTheme);
  var classes = (0, _classnames.default)('euiCollapsibleNavSubItem', className);
  if (isGroupTitle) {
    var TitleElement = props.titleElement || 'div';
    return (0, _react2.jsx)(_title.EuiTitle, {
      size: "xxxs",
      css: styles.euiCollapsibleNavItem__groupTitle,
      className: "euiCollapsibleNavItem__groupTitle eui-textTruncate"
    }, (0, _react2.jsx)(TitleElement, null, props.title));
  }
  return (0, _react2.jsx)(EuiCollapsibleNavItemDisplay, (0, _extends2.default)({
    className: classes
  }, props, {
    isSubItem: true
  }));
};

/**
 * The actual exported component
 */
exports.EuiCollapsibleNavSubItem = EuiCollapsibleNavSubItem;
var EuiCollapsibleNavItem = function EuiCollapsibleNavItem(_ref4) {
  var className = _ref4.className,
    props = (0, _objectWithoutProperties2.default)(_ref4, _excluded3);
  var classes = (0, _classnames.default)('euiCollapsibleNavItem', className);
  var _useContext = (0, _react.useContext)(_context.EuiCollapsibleNavContext),
    isCollapsed = _useContext.isCollapsed,
    isPush = _useContext.isPush;
  return isCollapsed && isPush ? (0, _react2.jsx)(_collapsed.EuiCollapsedNavItem, (0, _extends2.default)({
    className: classes
  }, props)) : (0, _react2.jsx)(EuiCollapsibleNavItemDisplay, (0, _extends2.default)({
    className: classes
  }, props, {
    isSubItem: false
  }));
};
exports.EuiCollapsibleNavItem = EuiCollapsibleNavItem;