{"ast":null,"code":"/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License\n * 2.0 and the Server Side Public License, v 1; you may not use this file except\n * in compliance with, at your election, the Elastic License 2.0 or the Server\n * Side Public License, v 1.\n */\n\nimport { useRef, useCallback, useEffect } from 'react';\nexport var useRowManager = function useRowManager(_ref) {\n  var innerGridRef = _ref.innerGridRef,\n    rowClasses = _ref.rowClasses;\n  var rowIdToElements = useRef(new Map());\n  var getRow = useCallback(function (_ref2) {\n    var rowIndex = _ref2.rowIndex,\n      visibleRowIndex = _ref2.visibleRowIndex,\n      top = _ref2.top,\n      height = _ref2.height;\n    var rowElement = rowIdToElements.current.get(rowIndex);\n    if (rowElement == null) {\n      rowElement = document.createElement('div');\n      rowElement.setAttribute('role', 'row');\n      rowElement.dataset.gridRowIndex = String(rowIndex); // Row index from data, affected by sorting/pagination\n      rowElement.dataset.gridVisibleRowIndex = String(visibleRowIndex); // Affected by sorting/pagination\n      rowElement.classList.add('euiDataGridRow');\n      if (rowClasses !== null && rowClasses !== void 0 && rowClasses[rowIndex]) {\n        rowElement.classList.add(rowClasses[rowIndex]);\n      }\n      var isOddRow = visibleRowIndex % 2 !== 0;\n      if (isOddRow) rowElement.classList.add('euiDataGridRow--striped');\n      rowElement.style.position = 'absolute';\n      rowElement.style.left = '0';\n      rowElement.style.right = '0';\n\n      // In order for the rowElement's left and right position to correctly inherit\n      // from the innerGrid width, we need to make its position relative\n      innerGridRef.current.style.position = 'relative';\n\n      // add the element to the grid\n      innerGridRef.current.appendChild(rowElement);\n\n      // add the element to the row map\n      rowIdToElements.current.set(rowIndex, rowElement);\n\n      // watch the row's children, if they all disappear then remove this row\n      var observer = new MutationObserver(function (records) {\n        if (records[0].target.childElementCount === 0) {\n          var _rowElement;\n          observer.disconnect();\n          (_rowElement = rowElement) === null || _rowElement === void 0 ? void 0 : _rowElement.remove();\n          rowIdToElements.current.delete(rowIndex);\n        }\n      });\n      observer.observe(rowElement, {\n        childList: true\n      });\n    }\n\n    // Ensure that the row's dimensions are always correct by having each cell update position styles\n    rowElement.style.top = top;\n    rowElement.style.height = \"\".concat(height, \"px\");\n    return rowElement;\n  }, [rowClasses, innerGridRef]);\n\n  // Update row classes dynamically whenever a new prop is passed in\n  useEffect(function () {\n    if (rowClasses) {\n      rowIdToElements.current.forEach(function (rowElement, rowIndex) {\n        if (rowClasses[rowIndex]) {\n          rowElement.classList.value = \"euiDataGridRow \".concat(rowClasses[rowIndex]);\n        } else {\n          rowElement.classList.value = 'euiDataGridRow'; // Clear any added classes\n        }\n      });\n    }\n  }, [rowClasses]);\n  return {\n    getRow: getRow\n  };\n};","map":{"version":3,"names":["useRef","useCallback","useEffect","useRowManager","_ref","innerGridRef","rowClasses","rowIdToElements","Map","getRow","_ref2","rowIndex","visibleRowIndex","top","height","rowElement","current","get","document","createElement","setAttribute","dataset","gridRowIndex","String","gridVisibleRowIndex","classList","add","isOddRow","style","position","left","right","appendChild","set","observer","MutationObserver","records","target","childElementCount","_rowElement","disconnect","remove","delete","observe","childList","concat","forEach","value"],"sources":["E:/Job Portal/Job_Portal/frontend/node_modules/@elastic/eui/es/components/datagrid/body/data_grid_row_manager.js"],"sourcesContent":["/*\n * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n * or more contributor license agreements. Licensed under the Elastic License\n * 2.0 and the Server Side Public License, v 1; you may not use this file except\n * in compliance with, at your election, the Elastic License 2.0 or the Server\n * Side Public License, v 1.\n */\n\nimport { useRef, useCallback, useEffect } from 'react';\nexport var useRowManager = function useRowManager(_ref) {\n  var innerGridRef = _ref.innerGridRef,\n    rowClasses = _ref.rowClasses;\n  var rowIdToElements = useRef(new Map());\n  var getRow = useCallback(function (_ref2) {\n    var rowIndex = _ref2.rowIndex,\n      visibleRowIndex = _ref2.visibleRowIndex,\n      top = _ref2.top,\n      height = _ref2.height;\n    var rowElement = rowIdToElements.current.get(rowIndex);\n    if (rowElement == null) {\n      rowElement = document.createElement('div');\n      rowElement.setAttribute('role', 'row');\n      rowElement.dataset.gridRowIndex = String(rowIndex); // Row index from data, affected by sorting/pagination\n      rowElement.dataset.gridVisibleRowIndex = String(visibleRowIndex); // Affected by sorting/pagination\n      rowElement.classList.add('euiDataGridRow');\n      if (rowClasses !== null && rowClasses !== void 0 && rowClasses[rowIndex]) {\n        rowElement.classList.add(rowClasses[rowIndex]);\n      }\n      var isOddRow = visibleRowIndex % 2 !== 0;\n      if (isOddRow) rowElement.classList.add('euiDataGridRow--striped');\n      rowElement.style.position = 'absolute';\n      rowElement.style.left = '0';\n      rowElement.style.right = '0';\n\n      // In order for the rowElement's left and right position to correctly inherit\n      // from the innerGrid width, we need to make its position relative\n      innerGridRef.current.style.position = 'relative';\n\n      // add the element to the grid\n      innerGridRef.current.appendChild(rowElement);\n\n      // add the element to the row map\n      rowIdToElements.current.set(rowIndex, rowElement);\n\n      // watch the row's children, if they all disappear then remove this row\n      var observer = new MutationObserver(function (records) {\n        if (records[0].target.childElementCount === 0) {\n          var _rowElement;\n          observer.disconnect();\n          (_rowElement = rowElement) === null || _rowElement === void 0 ? void 0 : _rowElement.remove();\n          rowIdToElements.current.delete(rowIndex);\n        }\n      });\n      observer.observe(rowElement, {\n        childList: true\n      });\n    }\n\n    // Ensure that the row's dimensions are always correct by having each cell update position styles\n    rowElement.style.top = top;\n    rowElement.style.height = \"\".concat(height, \"px\");\n    return rowElement;\n  }, [rowClasses, innerGridRef]);\n\n  // Update row classes dynamically whenever a new prop is passed in\n  useEffect(function () {\n    if (rowClasses) {\n      rowIdToElements.current.forEach(function (rowElement, rowIndex) {\n        if (rowClasses[rowIndex]) {\n          rowElement.classList.value = \"euiDataGridRow \".concat(rowClasses[rowIndex]);\n        } else {\n          rowElement.classList.value = 'euiDataGridRow'; // Clear any added classes\n        }\n      });\n    }\n  }, [rowClasses]);\n  return {\n    getRow: getRow\n  };\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}